#include "Rules.h" 

/* запрашивает количество игроков для определения типа 
игры (против компьютера или против другого человека) */
void quantity(char* variant)
{
	// цикл работает пока не выбран один из предложенных вариантов типа игры
	while (*variant != '1' 
		&& *variant != '2')
	{
		// вывод просьбы о вводе количества игроков
		cout << "\n" << "Введите количество игроков (1 или 2) ";
		// ввод числа игроков
		cin >> *variant; 
		// проверка, введено ли одно из предложенных значений
		if ((*variant != '1') 
		 && (*variant != '2'))
		{
		}
		// очистка экрана
		system("cls");
		/* вывод сообщения об ошибке, если введено число, 
		не относящееся к предложенным вариантам */
		cout << "\n" << "Ошибка!" << "\n\n";
	}
	// очистка экрана
	system("cls");
}


// предложение сыграть ещё раз (можно выбрать тип игры)
bool Restart(char board[], char* variant, int* turn)
{
	// переменная, хранящая выбор игрока на вопрос, хочет ли он сыграть ещё раз
	char s = ' ';
	// цикл продолжается, пока не будет выбран один из предложенных вариантов
	while (s != '+'&&s != '-')
	{
		// вывод на экран предложения о повторе игры
		cout << "\n" << " Хотите сыграть ещё раз? +/-: ";
		// ввод согласия/несогласия
		cin >> s;
		// очистка экрана
		system("cls");
	}
	// цикл заполнения массива номерами ячеек ("горячими клавишами")
	control_buttons(board);
	// переменная, запоминающая количество игроков сбрасывает значение
	*variant = ' ';
	// право хода передаётся крестикам (по умолчанию они делают первый ход)
	*turn = 1;
	// цикл работает, если введен "+" (согласие сыграть ещё раз)
	if (s == '+')
	{
		// очистка экрана
		system("cls");
		// завершает выполнение функции и возвращает значение "истина" в вызывающую функцию
		return 1;
	}
	// завершает выполнение функции и возвращает значение "ложь" в вызывающую функцию
		return 0;
}


// проверка выйгрыша
bool winner(char player, char board[])
{
	int winner[][3] = 
	{
		{ 0,1,2 },{ 3,4,5 },
		{ 6,7,8 },{ 0,3,6 },
		{ 1,4,7 },{ 2,5,8 },
		{ 0,4,8 },{ 2,4,6 }
	}; 
	// в цикле проверяются на выигрыш вышеописанные позиции
	for (int i = 0; i<8; i++)
	{
		int count = 0;
		// счётчик проверяет, есть ли 3 символа одного из игроков, стоящих в выигрышных позициях
		for (int j = 0; j<3; j++)
		{
			// проверяет условие победы игрока
			if (board[winner[i][j]] == player)
			{
				count++; if (count == 3)
				{
					// завершает выполнение функции и возвращает значение "истина" в вызывающую функцию
					return 1;
				}
			}
		}
	}
	// завершает выполнение функции и возвращает значение "ложь" в вызывающую функцию
	return 0;
}


// проверка на ничью
bool no_winner(int* turn)
{
	// проверяет, если очередь меняется уже больше 9 раз (т.е. никто не выиграл)
	return(*turn > 9);
}


// объявляет о победе или ничьей
void find_winner(char board[])
{
	// если выиграл игрок, играющий "крестиками"
	if (winner('X', board))
	{
		// вывод сообщения о победе крестиков
		cout << "\n\n\n Победили X" << "\n\n\a";
	}
	// если выиграл игрок, играющий "ноликами"
	else if (winner('O', board))
	{
		// вывод сообщения о победе "ноликов"
		cout << "\n\n\n Победили O" << "\n\n\a";
	}
	// если никто из них не выиграл
	else
	{
		// вывод сообщения о ничьей
		cout << "\n\n\n Ничья" << "\n\n\a";
	}
}
